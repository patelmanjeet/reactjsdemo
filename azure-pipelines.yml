# Node.js React Web App to Linux on Azure
# Build a Node.js React app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master
- dev

pr:
  - dev

variables:
  - group: my-variable-group

  # Azure Resource Manager connection created during pipeline creation
  - name: azureSubscription
    value: 'xxx'
  
  - name: webAppName
    value: 'reactjs123'
  
  - name: environmentName
    value: 'azureappserver-nonprod'
   
  # Agent VM image name
  - name: vmImageName
    value: 'ubuntu-latest'
  
  - name: isPR
    value: $[eq(variables['Build.Reason'], 'PullRequest')]

  

stages:


- stage: Package
  displayName: Package
  condition: in(variables['Build.SourceBranchName'], 'master', 'dev')
  jobs:
  - job: Package
    displayName: Package
    pool:
      vmImage: $(vmImageName)

    steps:
    - script: echo $(NONPROD_SUB) # uses macro syntax

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Test_Build
  displayName: Test Build
  condition: always()
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      displayName: Install NodeTool
      inputs:
        versionSpec: '14.x'

    - task: Npm@1
      displayName: Run npm install
      inputs:
        command: 'install'

    - task: Npm@1
      displayName: Run npm build
      inputs:
        command: 'custom'
        customCommand: 'run build'

- stage: Deploy
  displayName: Deploy
  condition: in(variables['Build.SourceBranchName'], 'master', 'dev')
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)

    steps:
    - script: echo "test"




